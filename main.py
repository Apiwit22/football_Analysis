import tkinter as tk
import glob
from tkinter import filedialog, ttk, messagebox
from yolo_inference import run_tracking
from heatmap_plot import generate_heatmap
import os
import threading  # ‚úÖ ‡πÉ‡∏ä‡πâ Threading ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏Å‡πâ‡∏õ‡∏±‡∏ç‡∏´‡∏≤ Not Responding

class FootballApp:
    def __init__(self, root):
        self.root = root
        self.root.title("Football Tracking & Heatmap Generator")
        self.root.geometry("600x200")

        self.video_path = None
        self.heatmap_paths = []  # ‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ü‡∏•‡πå heatmap ‡∏ó‡∏±‡πâ‡∏á 3 ‡∏£‡∏π‡∏õ

        # ----- UI Layout -----
        self.create_widgets()

    def create_widgets(self):
        # Top Frame
        top_frame = tk.Frame(self.root)
        top_frame.pack(pady=10)

        btn_select = tk.Button(top_frame, text="üé• ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠", command=self.select_video)
        btn_select.grid(row=0, column=0, padx=5)

        btn_track = tk.Button(top_frame, text="üèÉ‚Äç‚ôÇÔ∏è Run Tracking", command=self.start_tracking_thread)
        btn_track.grid(row=0, column=1, padx=5)

        btn_heatmap = tk.Button(top_frame, text="üî• Generate Heatmap", command=self.start_heatmap_thread)
        btn_heatmap.grid(row=0, column=2, padx=5)

        # Status
        self.status_label = tk.Label(self.root, text="üîÑ Ready", anchor='w')
        self.status_label.pack(fill='x', pady=5)

        # Progress Bar
        self.progress = ttk.Progressbar(self.root, mode='indeterminate')
        self.progress.pack(fill='x', padx=20)

    def select_video(self):
        path = filedialog.askopenfilename(filetypes=[("Video files", "*.mp4 *.avi *.mov")])
        if path:
            self.video_path = path
            self.status_label.config(text=f"üìÇ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏•‡πâ‡∏ß: {os.path.basename(path)}")

    ### ‚úÖ ‡πÉ‡∏ä‡πâ Threading ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô UI ‡∏Ñ‡πâ‡∏≤‡∏á
    def start_tracking_thread(self):
        threading.Thread(target=self.run_tracking, daemon=True).start()

    def run_tracking(self):
        if not self.video_path:
            messagebox.showwarning("Missing video", "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡∏Å‡πà‡∏≠‡∏ô")
            return

        self.status_label.config(text="üèÉ‚Äç‚ôÇÔ∏è ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏£‡∏±‡∏ô YOLO Tracking...")
        self.progress.start()

        try:
            run_tracking(self.video_path)  # üèÉ‚Äç‚ôÇÔ∏è Tracking
            self.status_label.config(text="‚úÖ Tracking ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå‡πÅ‡∏•‡πâ‡∏ß!")

            # ‡∏´‡∏≤‡πÑ‡∏ü‡∏•‡πå‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠ output ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏à‡∏≤‡∏Å runs/detect
            predict_dirs = sorted(glob.glob('runs/detect/predict*'), key=os.path.getmtime, reverse=True)
            if predict_dirs:
                output_dir = predict_dirs[0]
                for f in os.listdir(output_dir):
                    if f.endswith('.mp4'):
                        tracked_video_path = os.path.join(output_dir, f)
                        self.root.after(0, lambda: self.save_tracked_video(tracked_video_path))
                        break

        except Exception as e:
            messagebox.showerror("Tracking Error", str(e))
            self.status_label.config(text="‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏Ç‡∏ì‡∏∞ Tracking")
        finally:
            self.progress.stop()

    def save_tracked_video(self, video_path):
        if not os.path.exists(video_path):  # ‚ùå ‡πÑ‡∏ü‡∏•‡πå‡∏ï‡πâ‡∏ô‡∏â‡∏ö‡∏±‡∏ö‡∏´‡∏≤‡∏¢
            messagebox.showerror("Error", "‚ùå ‡πÑ‡∏ü‡∏•‡πå‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏£‡∏¥‡∏á!")
            return

        save_path = filedialog.asksaveasfilename(
            defaultextension=".mp4",
            filetypes=[("MP4 files", "*.mp4")],
            title="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠"
        )

        if not save_path:  # ‚ùå ‡∏ñ‡πâ‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Å‡∏î‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
            messagebox.showwarning("Warning", "‚ö†Ô∏è ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠")
            return

        if os.path.exists(save_path):  # ‚ö†Ô∏è ‡∏ñ‡πâ‡∏≤‡πÑ‡∏ü‡∏•‡πå‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß ‡πÉ‡∏´‡πâ‡∏ñ‡∏≤‡∏°‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏ó‡∏±‡∏ö
            confirm = messagebox.askyesno("Confirm Overwrite", f"‚ö†Ô∏è ‡πÑ‡∏ü‡∏•‡πå {os.path.basename(save_path)} ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß\n‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏ó‡∏±‡∏ö‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?")
            if not confirm:
                return  # ‚ùå ‡πÑ‡∏°‡πà‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏ó‡∏±‡∏ö

        try:
            os.rename(video_path, save_path)  # ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå
            messagebox.showinfo("‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", f"‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ó‡∏µ‡πà:\n{save_path}")
        except Exception as e:
            messagebox.showerror("Error", f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡πÑ‡∏î‡πâ:\n{e}")

    ### ‚úÖ ‡πÉ‡∏ä‡πâ Threading ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô UI ‡∏Ñ‡πâ‡∏≤‡∏á
    def start_heatmap_thread(self):
        threading.Thread(target=self.run_heatmap, daemon=True).start()

    def run_heatmap(self):
        self.status_label.config(text="üî• ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á Heatmap ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏±‡πâ‡∏á 3 ‡∏ó‡∏µ‡∏°...")
        self.progress.start()

        try:
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á heatmap 3 ‡πÅ‡∏ö‡∏ö
            self.heatmap_paths = [
                generate_heatmap("team1"),
                generate_heatmap("team2"),
                generate_heatmap("both")
            ]

            self.status_label.config(text="‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á Heatmap ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß!")
            self.root.after(0, self.save_heatmap_files)  # ‡πÉ‡∏ä‡πâ after() ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏µ‡∏¢‡∏Å UI event

        except Exception as e:
            messagebox.showerror("Heatmap Error", str(e))
            self.status_label.config(text="‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏Ç‡∏ì‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á Heatmap")
        finally:
            self.progress.stop()

    def save_heatmap_files(self):
        save_dir = filedialog.askdirectory(title="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å Heatmap")

        if not save_dir:  # ‚ùå ‡∏ñ‡πâ‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Å‡∏î‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
            messagebox.showwarning("Warning", "‚ö†Ô∏è ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å Heatmap")
            return

        failed_saves = []  # üìå ‡πÄ‡∏Å‡πá‡∏ö‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à

        for heatmap in self.heatmap_paths:
            if not os.path.exists(heatmap):  # ‚ùå ‡πÑ‡∏ü‡∏•‡πå heatmap ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà
                failed_saves.append(os.path.basename(heatmap))
                continue  # ‡∏Ç‡πâ‡∏≤‡∏°‡πÑ‡∏ü‡∏•‡πå‡∏ô‡∏µ‡πâ‡πÑ‡∏õ

            save_path = os.path.join(save_dir, os.path.basename(heatmap))

            if os.path.exists(save_path):  # ‚ö†Ô∏è ‡∏ñ‡πâ‡∏≤‡πÑ‡∏ü‡∏•‡πå‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß ‡πÉ‡∏´‡πâ‡∏ñ‡∏≤‡∏°‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏ó‡∏±‡∏ö
                confirm = messagebox.askyesno("Confirm Overwrite", f"‚ö†Ô∏è ‡πÑ‡∏ü‡∏•‡πå {os.path.basename(save_path)} ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß\n‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏ó‡∏±‡∏ö‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?")
                if not confirm:
                    continue  # ‚ùå ‡∏Ç‡πâ‡∏≤‡∏°‡πÑ‡∏ü‡∏•‡πå‡∏ô‡∏µ‡πâ‡πÑ‡∏õ

            try:
                os.rename(heatmap, save_path)  # ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå
            except Exception as e:
                failed_saves.append(os.path.basename(heatmap))

        if failed_saves:
            messagebox.showwarning("Warning", f"‚ö†Ô∏è ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å Heatmap ‡∏ö‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:\n{', '.join(failed_saves)}")
        else:
            messagebox.showinfo("‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", f"Heatmap ‡∏ñ‡∏π‡∏Å‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ó‡∏µ‡πà:\n{save_dir}")


# -----------------
if __name__ == "__main__":
    root = tk.Tk()
    app = FootballApp(root)
    root.mainloop()
